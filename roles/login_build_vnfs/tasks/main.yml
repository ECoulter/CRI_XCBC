---

   - name: copy login_template.tmpl for wwmkchroot
     copy: src=login-nodes.tmpl dest="{{ template_path }}{{ login_template }}.tmpl"

   - name: copy login_packages for wwmkchroot
     copy: src=login_packages dest="{{ template_path }}login_packages"

   - name: make chroot
     command: wwmkchroot "{{ login_template }}" "{{ login_chroot_loc }}"

   - name: copy resolve.conf into image
     copy: src=/etc/resolv.conf dest="{{ login_chroot_loc }}/etc/resolv.conf" #"

#create slurm, ganglia, chrony with correct UIDs
   - name: system user uid tasks
     include: sys_user_tasks.yml
     with_items: 
      - "slurm"
      - "ganglia"
      - "chrony"


   - name: yum install into the image chroot
     command: yum -y --installroot={{ login_chroot_loc }} install chrony kernel glibc-devel glibc-headers kernel-devel kernel-headers dkms ganglia-gmond-ohpc infinipath-psm infiniband-diags firewalld
#" for vim

   - name: yum install slurm client into image
     command: yum -y --installroot={{ login_chroot_loc }} groupinstall ohpc-slurm-client

   - name: yum install ohpc IB drivers
     command: yum -y --installroot={{ login_chroot_loc }} groupinstall "Infiniband Support"

# STEPS FOR AD AUTH
# yum install realmd sssd oddjob oddjob-mkhomedir adcli samba-common samba-common-tools krb5-workstation openldap-clients policycoreutils-python -y 
#   - name: install AD auth dependencies
#     command: yum -y --installroot={{ login_chroot_loc }} install realmd sssd oddjob oddjob-mkhomedir adcli samba-common samba-common-tools krb5-workstation openldap-clients policycoreutils-python 

   - name: enable rdma
     command: chroot "{{ login_chroot_loc }}" systemctl enable rdma

   - name: cluster-env.sh template
     file: src=cluster-env.sh dest={{ login_chroot_loc }}/etc/profile.d/cluster-env.sh

   - name: cluster-env template
     file: src=cluster-env dest={{ login_chroot_loc }}/usr/bin/cluster-env mode=0755

#" for vim
#
##FIREWALL STUFF - DON'T LEAVE COMMENTED OUT
   - name: firewalld.conf template
     template: src=firewalld.conf dest={{ login_chroot_loc }}/etc/firewalld/firewalld.conf

   - name: firewall public zone template
     template: src=zones/public.xml.j2 dest={{ login_chroot_loc }}/etc/firewalld/zones/public.xml

   - name: firewall slurm service template
     template: src=services/slurm.xml dest={{ login_chroot_loc }}/etc/firewalld/services/slurm.xml

   - name: firewall internal zone template
     template: src=zones/internal.xml.j2 dest={{ login_chroot_loc }}/etc/firewalld/zones/internal.xml

   - name: define public ip config
     copy: src=ifcfg-eth0 dest=/etc/sysconfig/network-scripts/ifcfg-eth0
 
   - name: define private ip config
     copy: src=ifcfg-eth1 dest=/etc/sysconfig/network-scripts/ifcfg-eth1
 
   - name: copy ssh keys over
     copy: src=cluster_root.pub dest={{ login_chroot_loc }}/root/.ssh/authorized_keys

   - name: create software, scratch, data directories
     file: name={{ item }} state=directory
     with_items:
      - "/software"
      - "/data"
      - "/scratch"

   - name: put NFS home mount info in image
     lineinfile: line="{{ hnas_private_ip }}:/Clusterhome /home nfs rw,suid,dev,exec,nouser,sync 0 0" dest={{ login_chroot_loc }}/etc/fstab state=present

   - name: put NFS scratch mount info in image
     lineinfile: line="{{ hnas_private_ip }}:/Clusterscratch /scratch nfs rw,suid,dev,exec,nouser,sync 0 0" dest={{ login_chroot_loc }}/etc/fstab state=present

   - name: put NFS software mount info in image
     lineinfile: line="{{ hnas_private_ip }}:/Clustersoftware /software nfs rw,suid,dev,exec,nouser,sync 0 0" dest={{ login_chroot_loc }}/etc/fstab state=present

   - name: put NFS data mount info in image
     lineinfile: line="{{ hnas_private_ip }}:/Clusterdata /data nfs rw,suid,dev,exec,nouser,sync 0 0" dest={{ login_chroot_loc }}/etc/fstab state=present

   - name: chronyd on login image enabled 
     command: chroot '{{ login_chroot_loc }}' systemctl enable chronyd

   - name: add headnode to login chrony.conf
     lineinfile: line="server {{ headnode_private_ip }}" dest={{ login_chroot_loc }}/etc/chrony.conf state=present

   - name: pull root passwd from shadow into login vnfs
     shell: sed -i "s-^root.*-$(grep root /etc/shadow)-" {{ login_chroot_loc }}/etc/shadow

   - name: wwimport file (gres.conf)
     command: wwsh file import /etc/slurm/gres.conf

   - name: wwsh import file (passwd)
     command: wwsh file import /etc/passwd

   - name: wwsh import file (group)
     command: wwsh file import /etc/group

   - name: wwsh import file (shadow)
     command: wwsh file import /etc/shadow

   - name: wwsh import file (slurm)
     command: wwsh file import /etc/slurm/slurm.conf

   - name: wwsh import file (munge)
     command: wwsh file import /etc/munge/munge.key

   - name: import ifcfg-eth0 for public internet
     command: wwsh file import /root/CRI_XCBC/roles/login_build_vnfs/files/ifcfg-eth0 -D /etc/sysconfig/network-scripts/ifcfg-eth0

   - name: gmond template
     template: src=gmond.conf.j2 dest="{{ login_chroot_loc }}/etc/ganglia/gmond.conf"

   - name: build bootstrap image
     shell: wwbootstrap {{ build_kernel_ver }}

   - name: build the vnfs 
     command: wwvnfs -y --chroot "{{ login_chroot_loc }}/"

   - name: set up provisioning interface
     lineinfile: line="GATEWAYDEV={{ private_interface }}" dest=/tmp/network.ww create=yes
#" for vim
#
   - name: add network file to import
     command: wwsh -y file import /tmp/network.ww --name network

   - name: set network file path
     command: wwsh -y file set network --path /etc/sysconfig/network --mode=0644 --uid=0
